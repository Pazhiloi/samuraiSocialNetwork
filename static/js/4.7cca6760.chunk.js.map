{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm.jsx/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,gICE3KC,EAA6B,SAACC,GAAD,MAAY,CAC9CC,OAAQD,EAAME,KAAKD,S,mCCUNE,EAVK,SAACC,GACnB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACG,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACG,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCDnBC,EANC,SAACT,GACf,OACE,qBAAKG,UAAWC,IAAEC,OAAlB,SAA2BL,EAAMU,W,iCCD/BC,EAAcC,YAAiB,IActBC,cAAU,CAACC,KAAM,wBAAjBD,EAbQ,SAACb,GACtB,OACI,uBAAMe,SAAUf,EAAMgB,aAAtB,UACI,8BACA,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAClBC,SAAU,CAACC,IAASV,GACpBH,KAAK,iBACLc,YAAY,yBAEZ,8BAAK,kDCsBAC,EA1BC,SAACvB,GACf,IAAIJ,EAAQI,EAAMwB,YACdC,EAAkB7B,EAAM8B,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYpB,KAAMoB,EAAEpB,KAAiBN,GAAI0B,EAAE1B,IAAZ0B,EAAE1B,OAC1E2B,EAAmBjC,EAAMkC,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASrB,QAASqB,EAAErB,SAAcqB,EAAE7B,OAMpF,OAAIF,EAAMH,OAGP,sBAAKM,UAAWC,IAAEsB,QAAlB,UACE,qBAAKvB,UAAWC,IAAE4B,aAAlB,SACEP,IAEF,qBAAKtB,UAAWC,IAAE0B,SAAlB,SACA,8BAAMD,MAGN,cAAC,EAAD,CAAgBd,SAfD,SAACkB,GACnBjC,EAAMkC,YAAYD,EAAOE,sBAGH,cAAC,IAAD,CAAU5B,GAAI,YCIxB6B,sBACbC,aAfsB,SAACzC,GACvB,MAAM,CACJ4B,YAAa5B,EAAM4B,gBAGI,SAACc,GAC1B,MAAM,CACJJ,YAAa,SAACC,GACZG,EAASC,YAAmBJ,ULVF,SAACK,GAAe,IACxCC,EADuC,4JAE3C,WACE,OAAKC,KAAK1C,MAAMH,OAET,cAAC2C,EAAD,eAAeE,KAAK1C,QAFI,cAAC,IAAD,CAAUO,GAAI,eAHJ,GACboC,IAAMH,WAStC,OADkCH,YAAQ1C,EAAR0C,CAAoCI,KKOzDL,CAGbb","file":"static/js/4.7cca6760.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1YOAl\",\"dialogsItems\":\"Dialogs_dialogsItems__104o8\",\"active\":\"Dialogs_active__2UhxZ\",\"messages\":\"Dialogs_messages__2BBBR\",\"message\":\"Dialogs_message___6u8E\"};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\n const mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component{\r\n    render(){\r\n      if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n      return <Component {...this.props}/>\r\n    }\r\n  }\r\n \r\n let ConnectAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n  return ConnectAuthRedirectComponent;\r\n};\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './../Dialogs.module.css'\r\n\r\n const DialogItem = (props) =>{\r\n  let path = \"/dialogs/\" + props.id;\r\n\r\n  return(\r\n     <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n      </div>\r\n  )\r\n};\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nconst Message = (props) => {\r\n  return (\r\n    <div className={s.dialog}>{props.message}</div>\r\n  );\r\n};\r\n\r\nexport default Message;","import { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nconst maxLength50 = maxLengthCreator(50);\r\nconst AddMessageForm = (props) => {\r\n  return(\r\n      <form onSubmit={props.handleSubmit}>\r\n          <div>\r\n          <Field component={Textarea} \r\n          validate={[required,maxLength50]}\r\n          name='newMessageBody' \r\n          placeholder='Enter your message' />\r\n          </div>\r\n          <div><button>Send</button></div>\r\n      </form> \r\n  )\r\n}\r\nexport default reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { Redirect } from 'react-router';\r\nimport AddMessageForm from './AddMessageForm.jsx/AddMessageForm';\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n  let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n  let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />)\r\n\r\n let addNewMessage = (values) => {\r\n   props.sendMessage(values.newMessageBody);\r\n }\r\n\r\n if(!props.isAuth)return <Redirect to={\"/login\"}/>\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>\r\n       {dialogsElements}\r\n      </div>\r\n      <div className={s.messages}>\r\n      <div>{messagesElements}</div> \r\n      \r\n      </div>\r\n      <AddMessageForm onSubmit={addNewMessage}/>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { sendMessageCreator } from '../../Redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return{\r\n    dialogsPage: state.dialogsPage,\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return{\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody))\r\n    },\r\n  }\r\n}\r\n\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}